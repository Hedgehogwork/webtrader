{"version":3,"sources":["../../../../src/copytrade/index.es6"],"names":["getLoggedInUserId","local_storage","get","id","TRADE_TYPES","form_error_messages","invalid_stake_limit","token_already_added","enter_valid_token","refresh_failed","getStorageName","DEFAULT_TRADE_TYPES","slice","map","m","code","defaultCopySettings","traderApiToken","copy_start","min_trade_stake","max_trade_stake","assets","cloneDeep","DEFAULT_ASSETS","trade_types","defaultTraderDetails","loginid","open","started","disableStart","yourCopySettings","validate_min_max_stake","yourCopySettingsData","updateLocalStorage","debounce","clonedScope","scope","searchToken","disable","set","GROUPED_INTRUMENTS","then","flatten","instruments","displayName","display_name","submarkets","mm","forEach","eGrp","eSubGrp","symbol","push","name","state","masterAssetList","groupedAssets","filter","f","refreshTraderStats","token","send","copytrading_statistics","trader_id","copyStatData","traderTokenDetails","find","traderTokens","merge","traderStatistics","win","win_view","masterTradeTypeList","is_loading","is_virtual","allowCopy","allow_copiers","onAllowCopyChangeCopierCellClick","onChangeCopytradeSettings","onAllowCopyChangeTraderCellClick","set_settings","settings","catch","growl","error","message","e","onOpenChange","index","onStartedChange","newStarted","fromLocalStorage","currentTraderTokenDetails_localSto","newObj","splice","defer","settingsToSend","length","disableKeypressChars","copy_stop","onRemove","toBeRemovedItem","onRefresh","trader","disableRefresh","onMinTradeChange","event","formatAndSetTradeStake","onMaxTradeChange","type_trade_stake","target","data","value","format_amount","isNil","match","onUpdateYourSettings","notice","onTokenChange","onKeyDown","keyCode","addToken","some","tokenUserData","Error","focus","openTokenMgmt","click","initConfigWindow","root","i18n","bind","createBlankWindow","title","resizable","collapsable","minimizable","maximizable","modal","width","isVirtual","copyTrade","get_settings","traderToken","console","close","unbind","dialog","remove","track","module_id","is_unique","input_el_ids","comma_separated_ids","join","keypress","evt","which","preventDefault","init","$menuLink","moveToTop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AACA,MAAMA,oBAAoB,SAApBA,iBAAoB;AAAA,WAAMC,cAAcC,GAAd,CAAkB,OAAlB,EAA2B,CAA3B,EAA8BC,EAApC;AAAA,GAA1B;;AAEA,MAAMC,iCAAN;;AAEA,MAAMC,sBAAsB;AACxBC,yBAAqB,uDADG;AAExBC,yBAAqB,qBAFG;AAGxBC,uBAAmB,4BAHK;AAIxBC,oBAAgB;AAJQ,GAA5B;;AAOA,MAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,0BAAmBV,mBAAnB;AAAA,GAAvB;;AAEA,MAAMW,sBAAsBP,YAAYQ,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,EAAwBC,GAAxB,CAA4B;AAAA,WAAKC,EAAEC,IAAP;AAAA,GAA5B,CAA5B;;AAEA,MAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,cAAD;AAAA,WAAqB;AAC/CC,kBAAYD,cADmC;AAE/CE,uBAAiB,EAF8B;AAG/CC,uBAAiB,GAH8B;AAI/CC,cAAQ,iBAAEC,SAAF,CAAYC,cAAZ,CAJuC;AAK/CC,mBAAa,iBAAEF,SAAF,CAAYX,mBAAZ;AALkC,KAArB;AAAA,GAA5B;;AAQA,MAAMc,uBAAuB,SAAvBA,oBAAuB,CAACR,cAAD,EAAiBS,OAAjB;AAAA,WAA8B;AACzDC,YAAM,KADmD;AAEzDC,eAAS,KAFgD;AAGzDC,oBAAc,KAH2C;AAIzDH,sBAJyD;AAKzDI,wBAAkBd,oBAAoBC,cAApB;AALuC,KAA9B;AAAA,GAA7B;;AAQA,MAAMc,yBAAyB,SAAzBA,sBAAyB,CAACC,oBAAD,EAA0B;AAAA,QAC/Cb,eAD+C,GACVa,oBADU,CAC/Cb,eAD+C;AAAA,QAC9BC,eAD8B,GACVY,oBADU,CAC9BZ,eAD8B;;AAEvD,QAAID,kBAAkBC,eAAtB,EAAuC;AACrC,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,GAND;;AAQA,MAAMa,qBAAqB,iBAAEC,QAAF,CAAW,iBAAS;AAC7C,QAAMC,cAAc,iBAAEb,SAAF,CAAYc,KAAZ,CAApB;AACA,WAAOD,YAAYE,WAAZ,CAAwBC,OAA/B;AACArC,kBAAcsC,GAAd,CAAkB7B,gBAAlB,EAAoCyB,WAApC;AACD,GAJ0B,EAIxB,EAJwB,CAA3B;;AAMA,MAAIK,qBAAqB,IAAzB,C,CAA+B;AAC/B,MAAIjB,iBAAiB,IAArB;AACA;AACA,2BAAoBkB,IAApB,CAAyB,uBAAe;AACtCD,yBAAqB,iBAAEE,OAAF,CAAUC,YAAY9B,GAAZ,CAAgB,aAAK;AAClD,UAAM+B,cAAc9B,EAAE+B,YAAtB;AACA,aAAO/B,EAAEgC,UAAF,CAAajC,GAAb,CAAiB;AAAA,eAAO;AAC7B+B,uBAAgBA,WAAhB,WAAiCG,GAAGF,YADP;AAE7BF,uBAAaI,GAAGJ;AAFa,SAAP;AAAA,OAAjB,CAAP;AAID,KAN8B,CAAV,CAArB;AAOA,QAAItB,SAAS,EAAb;AACAsB,gBAAYK,OAAZ,CAAoB,gBAAQ;AAC1BC,WAAKH,UAAL,CAAgBE,OAAhB,CAAwB,mBAAW;AACjCE,gBAAQP,WAAR,CAAoBK,OAApB,CAA4B,gBAA8B;AAAA,cAA3BG,MAA2B,QAA3BA,MAA2B;AAAA,cAAnBN,YAAmB,QAAnBA,YAAmB;;AACxDxB,iBAAO+B,IAAP,CAAY;AACVrC,kBAAMoC,MADI;AAEVE,kBAAMR;AAFI,WAAZ;AAID,SALD;AAMD,OAPD;AAQD,KATD;AAUAS,UAAMC,eAAN,GAAwBlC,MAAxB;AACAiC,UAAME,aAAN,GAAsBhB,kBAAtB;AACA;AACAjB,qBAAiBF,OAAOoC,MAAP,CAAc;AAAA,aAAKC,EAAE3C,IAAF,KAAW,MAAhB;AAAA,KAAd,EAAsCF,GAAtC,CAA0C;AAAA,aAAKC,EAAEC,IAAP;AAAA,KAA1C,CAAjB;AACD,GAvBD;;AAyBA,MAAM4C,qBAAqB,SAArBA,kBAAqB,CAACjC,OAAD,EAAUkC,KAAV,EAAiBxB,KAAjB;AAAA,WAA2B,4BACnDyB,IADmD,CAC9C;AACJC,8BAAwB,CADpB;AAEJC,iBAAWrC;AAFP,KAD8C,EAKnDe,IALmD,CAK9C,wBAAgB;AACpB,UAAIuB,aAAaF,sBAAjB,EAAyC;AACvC,YAAMG,qBAAqB,iBAAEC,IAAF,CAAO9B,MAAM+B,YAAb,EAA2B;AAAA,iBACpDT,EAAE5B,gBAAF,IAAsB4B,EAAE5B,gBAAF,CAAmBZ,UAAnB,KAAkC0C,KADJ;AAAA,SAA3B,CAA3B;AAEA;AACA,YAAIK,kBAAJ,EAAwB;AACtB,2BAAEG,KAAF,CAAQH,mBAAmBI,gBAA3B,EAA6CL,aAAaF,sBAA1D;AACD;AACD;AAHA,aAIK;AACH1B,kBAAM+B,YAAN,CAAmBf,IAAnB,CAAwB,iBAAEgB,KAAF,CAAQ;AAC9BC,gCAAkBL,aAAaF;AADD,aAAR,EAErBrC,qBAAqBmC,KAArB,EAA4BlC,OAA5B,CAFqB,CAAxB;AAGD;AACF;AACDO,yBAAmBG,KAAnB;AACD,KArBmD,CAA3B;AAAA,GAA3B;;AAuBA,MAAIkC,MAAM,IAAV;AAAA,MAAgBC,WAAW,IAA3B;;AAEA,MAAMjB,QAAQ;AACZC,qBAAiB,EADL;AAEZiB,yBAAqB,iBAAElD,SAAF,CAAYlB,WAAZ,CAFT;AAGZoD,mBAAe,EAHH;AAIZiB,gBAAY,IAJA;AAKZC,gBAAY,KALA;AAMZC,eAAW;AACTC,qBAAe,CADN;AAETC,wCAAkC;AAAA,eAAMvB,MAAMwB,yBAAN,CAAgC,CAAhC,CAAN;AAAA,OAFzB;AAGTC,wCAAkC;AAAA,eAAMzB,MAAMwB,yBAAN,CAAgC,CAAhC,CAAN;AAAA;AAHzB,KANC;AAWZA,+BAA2B,iBAAE5C,QAAF,CAAW,UAAC0C,aAAD,EAAmB;AACvDtB,YAAMmB,UAAN,GAAmB,IAAnB;AACA,kCACGZ,IADH,CACQ;AACJmB,sBAAc,CADV;AAEJJ;AAFI,OADR,EAKGnC,IALH,CAKQ,UAACwC,QAAD,EAAc;AAClB3B,cAAMmB,UAAN,GAAmB,KAAnB;AACA;AACAnB,cAAMqB,SAAN,CAAgBC,aAAhB,GAAgCA,aAAhC;AACD,OATH,EAUGM,KAVH,CAUS,aAAK;AACV5B,cAAMmB,UAAN,GAAmB,KAAnB;AACA,yBAAEU,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASC,EAAED,OAAb,EAAd;AACD,OAbH;AAcD,KAhB0B,EAgBxB,GAhBwB,CAXf;AA4BZE,kBAAc,sBAACC,KAAD,EAAW;AACvBlC,YAAMa,YAAN,CAAmBqB,KAAnB,EAA0B7D,IAA1B,GAAiC,CAAC2B,MAAMa,YAAN,CAAmBqB,KAAnB,EAA0B7D,IAA5D;AACD,KA9BW;AA+BZ8D,qBAAiB,yBAACD,KAAD,EAAW;AAC1BlC,YAAMa,YAAN,CAAmBqB,KAAnB,EAA0B3D,YAA1B,GAAyC,IAAzC;AACA,UAAM6D,aAAa,CAACpC,MAAMa,YAAN,CAAmBqB,KAAnB,EAA0B5D,OAA9C;AACA,UAAI8D,UAAJ,EAAgB;AACd;AACA;AACA,YAAMC,mBAAmB1F,cAAcC,GAAd,CAAkBQ,gBAAlB,CAAzB;AACA,YAAIiF,gBAAJ,EAAsB;AACpB,cAAMC,qCAAqCD,iBAAiBxB,YAAjB,CAA8BqB,KAA9B,CAA3C;AACA,cAAII,kCAAJ,EAAwC;AACtC,gBAAMC,SAAS,EAAf;AACA,6BAAEzB,KAAF,CAAQyB,MAAR,EAAgBvC,MAAMa,YAAN,CAAmBqB,KAAnB,CAAhB,EAA2CI,kCAA3C;AACAtC,kBAAMa,YAAN,CAAmB2B,MAAnB,CAA0BN,KAA1B,EAAiC,CAAjC;AACA;AACA,6BAAEO,KAAF,CAAQ,YAAM;AACZzC,oBAAMa,YAAN,CAAmB2B,MAAnB,CAA0BN,KAA1B,EAAiC,CAAjC,EAAoCK,MAApC;AACA,kBAAMG,iBAAiB,iBAAE1E,SAAF,CAAYuE,OAAO/D,gBAAnB,CAAvB;AACA,kBAAI,CAACkE,eAAe7E,eAApB,EAAqC,OAAO6E,eAAe7E,eAAtB;AACrC,kBAAI,CAAC6E,eAAe5E,eAApB,EAAqC,OAAO4E,eAAe5E,eAAtB;AACrC,kBAAI,CAAC4E,eAAe3E,MAAhB,IAA0B2E,eAAe3E,MAAf,CAAsB4E,MAAtB,IAAgC,CAA9D,EAAiE,OAAOD,eAAe3E,MAAtB;AACjE,kBAAI,CAAC2E,eAAexE,WAAhB,IAA+BwE,eAAexE,WAAf,CAA2ByE,MAA3B,IAAqC,CAAxE,EAA2E,OAAOD,eAAexE,WAAtB;AAC3E,0CACGqC,IADH,CACQmC,cADR,EAEGvD,IAFH,CAEQ,YAAM;AACVoD,uBAAOhE,YAAP,GAAsB,KAAtB;AACAgE,uBAAOjE,OAAP,GAAiB,IAAjB;AACAsE,qCAAqB,kBAArB,EAAyC,kBAAzC;AACAjE,mCAAmBqB,KAAnB;AACD,eAPH,EAQG4B,KARH,CAQS,aAAK;AACV,iCAAEC,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASC,EAAED,OAAb,EAAd;AACAQ,uBAAOhE,YAAP,GAAsB,KAAtB;AACAqE,qCAAqB,kBAArB,EAAyC,kBAAzC;AACAjE,mCAAmBqB,KAAnB;AACD,eAbH;AAcD,aArBD;AAsBD;AACF;AACF,OAnCD,MAmCO;AACL;AACA,oCAAQO,IAAR,CAAa;AACTsC,qBAAW7C,MAAMa,YAAN,CAAmBqB,KAAnB,EAA0B1D,gBAA1B,CAA2CZ;AAD7C,SAAb,EAGGuB,IAHH,CAGQ,YAAM;AACVa,gBAAMa,YAAN,CAAmBqB,KAAnB,EAA0B3D,YAA1B,GAAyC,KAAzC;AACAyB,gBAAMa,YAAN,CAAmBqB,KAAnB,EAA0B5D,OAA1B,GAAoC,KAApC;AACAK,6BAAmBqB,KAAnB;AACD,SAPH,EAQG4B,KARH,CAQS,aAAK;AACV,2BAAEC,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASC,EAAED,OAAb,EAAd;AACA/B,gBAAMa,YAAN,CAAmBqB,KAAnB,EAA0B3D,YAA1B,GAAyC,KAAzC;AACAI,6BAAmBqB,KAAnB;AACD,SAZH;AAaD;AACF,KArFW;AAsFZ8C,cAAU,kBAACZ,KAAD,EAAW;AACnB,UAAMa,kBAAkB/C,MAAMa,YAAN,CAAmBqB,KAAnB,CAAxB;AACAlC,YAAMa,YAAN,CAAmB2B,MAAnB,CAA0BN,KAA1B,EAAiC,CAAjC;AACAvD,yBAAmBqB,KAAnB;AACA,kCAAQO,IAAR,CAAa;AACXsC,mBAAWE,gBAAgBvE,gBAAhB,CAAiCZ;AADjC,OAAb,EAGCgE,KAHD,CAGO,aAAK,CAAE,CAHd;AAID,KA9FW;AA+FZoB,eAAW,mBAACd,KAAD,EAAW;AACpB,UAAMe,SAASjD,MAAMa,YAAN,CAAmBqB,KAAnB,CAAf;AACA,UAAM9D,UAAU6E,OAAO7E,OAAvB;AACA,UAAMkC,QAAQ2C,OAAOzE,gBAAP,CAAwBZ,UAAtC;AACA,UAAIQ,WAAWkC,KAAf,EAAsB;AACpB2C,eAAOC,cAAP,GAAwB,IAAxB;AACA7C,2BAAmBjC,OAAnB,EAA4BkC,KAA5B,EAAmCN,KAAnC,EACGb,IADH,CACQ,YAAM;AACV8D,iBAAOC,cAAP,GAAwB,KAAxB;AACAvE,6BAAmBqB,KAAnB;AACD,SAJH,EAKG4B,KALH,CAKS,UAACI,CAAD,EAAO;AACZ,2BAAEH,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAAShF,oBAAoBI,cAA/B,EAAd;AACA8F,iBAAOC,cAAP,GAAwB,KAAxB;AACAvE,6BAAmBG,KAAnB;AACD,SATH;AAUD;AACF,KAhHW;AAiHZqE,sBAAkB,0BAACC,KAAD,EAAQtE,KAAR,EAAkB;AAClCkB,YAAMqD,sBAAN,CAA6BD,KAA7B,EAAoCtE,KAApC,EAA2C,iBAA3C;AACD,KAnHW;AAoHZwE,sBAAkB,0BAACF,KAAD,EAAQtE,KAAR,EAAkB;AAClCkB,YAAMqD,sBAAN,CAA6BD,KAA7B,EAAoCtE,KAApC,EAA2C,iBAA3C;AACD,KAtHW;AAuHZuE,4BAAwB,gCAACD,KAAD,EAAQtE,KAAR,EAAeyE,gBAAf,EAAoC;AAC1D,UAAMrB,QAAQ,sBAAEkB,MAAMI,MAAR,EAAgBC,IAAhB,CAAqB,OAArB,CAAd;AACA,UAAMC,QAAQN,MAAMI,MAAN,CAAaE,KAA3B;AACA,UAAMC,gBAAgB,iBAAEC,KAAF,CAAQF,KAAR,IAAiB,KAAjB,GAAyBA,MAAMG,KAAN,CAAY,mBAAZ,CAA/C;AACA,UAAIF,aAAJ,EAAmB;AACjB7E,cAAM+B,YAAN,CAAmBqB,KAAnB,EAA0B1D,gBAA1B,CAA2C+E,gBAA3C,IAA+DI,cAAc,CAAd,CAA/D;AACD,OAFD,MAEO;AACL7E,cAAM+B,YAAN,CAAmBqB,KAAnB,EAA0B1D,gBAA1B,CAA2C+E,gBAA3C,IAA+D,EAA/D;AACD;AACF,KAhIW;AAiIZO,0BAAsB,8BAAC5B,KAAD,EAAW;AAC/B,UAAIzD,uBAAuBuB,MAAMa,YAAN,CAAmBqB,KAAnB,EAA0B1D,gBAAjD,CAAJ,EAAwE;AACtEG,2BAAmBqB,KAAnB;AACA,yBAAE6B,KAAF,CAAQkC,MAAR,CAAe,EAAEhC,SAAS,sBAAX,EAAf;AACD,OAHD,MAGO;AACL,yBAAEF,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAAShF,oBAAoBC,mBAA/B,EAAd;AACD;AACF,KAxIW;AAyIZ+B,iBAAa;AACXuB,aAAO,EADI;AAEX0D,qBAAe,uBAACZ,KAAD,EAAQtE,KAAR;AAAA,eAAkBA,MAAMC,WAAN,CAAkBuB,KAAlB,GAA0B8C,MAAMI,MAAN,CAAaE,KAAzD;AAAA,OAFJ;AAGX1E,eAAS,KAHE;AAIXiF,iBAAW,mBAACb,KAAD,EAAQtE,KAAR,EAAkB;AAC3B,YAAIsE,MAAMc,OAAN,KAAkB,EAAtB,EAA0B;AACxBpF,gBAAMC,WAAN,CAAkBoF,QAAlB,CAA2Bf,KAA3B,EAAkCtE,KAAlC;AACD;AACF,OARU;AASXqF,gBAAU,kBAACf,KAAD,EAAQtE,KAAR,EAAkB;AAC1B;AACA,YAAI,CAACA,MAAMC,WAAN,CAAkBuB,KAAvB,EAA8B;AAC5B,2BAAEuB,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAAShF,oBAAoBG,iBAA/B,EAAd;AACA;AACD;;AAED;AACA,YAAI,iBAAEkH,IAAF,CAAOpE,MAAMa,YAAb,EAA2B;AAAA,iBAAKT,EAAE5B,gBAAF,CAAmBZ,UAAnB,KAAkCkB,MAAMC,WAAN,CAAkBuB,KAAzD;AAAA,SAA3B,CAAJ,EAAgG;AAC9F,2BAAEuB,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAAShF,oBAAoBE,mBAA/B,EAAd;AACA;AACD;;AAED6B,cAAMC,WAAN,CAAkBC,OAAlB,GAA4B,IAA5B;;AAEA,qCAAcF,MAAMC,WAAN,CAAkBuB,KAAhC,EACGnB,IADH,CACQ,yBAAiB;AACrB,cAAI,CAACkF,aAAL,EAAoB,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACpBjE,6BAAmBgE,cAAcjG,OAAjC,EAA0CU,MAAMC,WAAN,CAAkBuB,KAA5D,EAAmExB,KAAnE,EACGK,IADH,CACQ,YAAM;AACVL,kBAAMC,WAAN,CAAkBuB,KAAlB,GAA0B,EAA1B;AACAxB,kBAAMC,WAAN,CAAkBC,OAAlB,GAA4B,KAA5B;AACAL,+BAAmBG,KAAnB;AACD,WALH,EAMG8C,KANH,CAMS,aAAK;AACV,6BAAEC,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASC,EAAED,OAAb,EAAd;AACAjD,kBAAMC,WAAN,CAAkBC,OAAlB,GAA4B,KAA5B;AACAL,+BAAmBG,KAAnB;AACA,6BAAE2D,KAAF,CAAQ;AAAA,qBAAM,sBAAEW,MAAMI,MAAR,EAAgBe,KAAhB,EAAN;AAAA,aAAR;AACD,WAXH;AAYD,SAfH,EAgBG3C,KAhBH,CAgBS,iBAAS;AACd,2BAAEC,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASD,MAAMC,OAAjB,EAAd;AACAjD,gBAAMC,WAAN,CAAkBC,OAAlB,GAA4B,KAA5B;AACAL,6BAAmBG,KAAnB;AACD,SApBH;AAqBD;AA7CU,KAzID;AAwLZ+B,kBAAc,EAxLF;AAyLZ2D,mBAAe;AAAA,aAAM,sBAAE,kCAAF,EAAsCC,KAAtC,EAAN;AAAA;AAzLH,GAAd;;AA4LA,MAAMC,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7B,QAAMC,OAAO,uCAAQC,IAAR,EAAb;AACA3D,eAAW,sBAAG4D,IAAH,CAAQF,KAAK,CAAL,CAAR,EAAiB3E,KAAjB,CAAX;AACAgB,UAAM,kBAAQ8D,iBAAR,CAA0BH,IAA1B,EAAgC;AACpCI,aAAO,eAAeH,IAAf,EAD6B;AAEpCI,iBAAW,KAFyB;AAGpCC,mBAAa,IAHuB;AAIpCC,mBAAa,IAJuB;AAKpCC,mBAAa,KALuB;AAMpCC,aAAO,KAN6B;AAOpCC,aAAO,GAP6B;AAQpChH,YAAM,gBAAM;AACV2B,cAAMoB,UAAN,GAAmBkE,WAAnB;AACA,YAAI,CAACtF,MAAMoB,UAAX,EAAuB;AACrB;AACA,cAAMmE,YAAY5I,cAAcC,GAAd,CAAkBQ,gBAAlB,CAAlB;AACA,cAAImI,SAAJ,EAAe;AACb,6BAAEzE,KAAF,CAAQd,KAAR,EAAeuF,SAAf;AACAvF,kBAAMa,YAAN,GAAqB,iBAAE7C,SAAF,CAAYgC,MAAMa,YAAlB,CAArB,CAFa,CAEyC;AACvD;AACDb,gBAAMmB,UAAN,GAAmB,IAAnB;AACA;AACA,sCACGZ,IADH,CACQ,EAAEiF,cAAc,CAAhB,EADR,EAEGrG,IAFH,CAEQ,UAACwC,QAAD,EAAc;AAClB3B,kBAAMmB,UAAN,GAAmB,KAAnB;AACAnB,kBAAMqB,SAAN,CAAgBC,aAAhB,GAAgCK,SAAS6D,YAAT,CAAsBlE,aAAtD;AACD,WALH,EAMGM,KANH,CAMS,UAACI,CAAD,EAAO;AACZhC,kBAAMmB,UAAN,GAAmB,KAAnB;AACA,6BAAEU,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAASC,EAAED,OAAb,EAAd;AACD,WATH;;AAWA;AACA,cAAIwD,SAAJ,EAAe;AACb,yDAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACyBA,UAAU1E,YADnC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACU4E,iCADV;AAAA;AAGWrH,6BAHX,GAGqBqH,YAAYrH,OAHjC;AAIWkC,2BAJX,GAImBmF,YAAYjH,gBAAZ,CAA6BZ,UAJhD;AAAA;AAAA,6BAKWyC,mBAAmBjC,OAAnB,EAA4BkC,KAA5B,EAAmCN,KAAnC,CALX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOK0F,8BAAQ5D,KAAR;;AAPL;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;AAWD;AACF;AACF,OA7CmC;AA8CpC6D,aAAO,iBAAM;AACX1E,oBAAYA,SAAS2E,MAAT,EAAZ;AACA5E,eAAOA,IAAI6E,MAAJ,CAAW,SAAX,EAAsBC,MAAtB,EAAP;AACA7E,mBAAWD,MAAM,IAAjB;AACA;AACAhB,cAAMa,YAAN,GAAqB,EAArB;AACD,OApDmC;AAqDpC,yBAAmB;AArDiB,KAAhC,CAAN;AAuDAG,QAAI+E,KAAJ,CAAU;AACRC,iBAAW,WADH;AAERC,iBAAW,IAFH;AAGRxC,YAAM;AAHE,KAAV;AAKAzC,QAAI6E,MAAJ,CAAY,MAAZ;AACD,GAhED;;AAkEA,MAAMjD,uBAAuB,SAAvBA,oBAAuB,GAAqB;AAAA,sCAAjBsD,YAAiB;AAAjBA,kBAAiB;AAAA;;AAChD,QAAIA,aAAavD,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,UAAMwD,sBAAsBD,aAAaE,IAAb,CAAkB,IAAlB,CAA5B;AACA,4BAAED,mBAAF,EAAuBE,QAAvB,CAAgC,UAACC,GAAD,EAAS;AACvC,YAAI,CAACA,IAAIC,KAAJ,GAAY,EAAZ,IAAkBD,IAAIC,KAAJ,GAAY,EAA/B,KAAsCD,IAAIC,KAAJ,KAAc,CAApD,IAAyDD,IAAIC,KAAJ,KAAc,EAA3E,EAA+E;AAC7ED,cAAIE,cAAJ;AACD;AACF,OAJD;AAKD;AACF,GATD;;AAWO,MAAMC,sBAAO,SAAPA,IAAO,CAACC,SAAD,EAAe;AACjCA,cAAUjC,KAAV,CAAgB,YAAM;AACpB,UAAI,CAACzD,GAAL,EAAU;AACR0D;AACA9B,6BAAqB,kBAArB,EAAyC,kBAAzC;AACD,OAHD,MAIK;AAAE5B,YAAI2F,SAAJ;AAAkB;AAC1B,KAND;AAOD,GARM;;oBAUQ,EAAEF,UAAF,E","file":"index.js","sourcesContent":["import $ from 'jquery';\nimport windows from '../windows/windows';\nimport rv from '../common/rivetsExtra';\nimport _ from 'lodash';\nimport html from 'text!./index.html';\nimport 'css!./index.css';\nimport { trade_types } from '../common/common';\nimport '../common/util';\nimport liveapi from 'websockets/binary_websockets';\nimport validateToken from 'websockets/validateToken';\nimport { init as instrumentPromise } from '../instruments/instruments';\n\n// While using copy trader, this cannot be NULL\nconst getLoggedInUserId = () => local_storage.get(\"oauth\")[0].id;\n\nconst TRADE_TYPES = trade_types;\n\nconst form_error_messages = {\n    invalid_stake_limit: 'Min trade stake should be lower than max trade stake.',\n    token_already_added: 'Token already added',\n    enter_valid_token: 'Enter a valid trader token',\n    refresh_failed: 'Refresh failed',\n};\n\nconst getStorageName = () => `copyTrade_${getLoggedInUserId()}`;\n\nconst DEFAULT_TRADE_TYPES = TRADE_TYPES.slice(0, 2).map(m => m.code);\n\nconst defaultCopySettings = (traderApiToken) => ({\n  copy_start: traderApiToken,\n  min_trade_stake: 10,\n  max_trade_stake: 100,\n  assets: _.cloneDeep(DEFAULT_ASSETS),\n  trade_types: _.cloneDeep(DEFAULT_TRADE_TYPES),\n});\n\nconst defaultTraderDetails = (traderApiToken, loginid) => ({\n  open: false,\n  started: false,\n  disableStart: false,\n  loginid,\n  yourCopySettings: defaultCopySettings(traderApiToken),\n});\n\nconst validate_min_max_stake = (yourCopySettingsData) => {\n  const { min_trade_stake, max_trade_stake } = yourCopySettingsData;\n  if (min_trade_stake > max_trade_stake) {\n    return false;\n  }\n  return true;\n};\n\nconst updateLocalStorage = _.debounce(scope => {\n  const clonedScope = _.cloneDeep(scope);\n  delete clonedScope.searchToken.disable;\n  local_storage.set(getStorageName(), clonedScope);\n}, 50);\n\nlet GROUPED_INTRUMENTS = null; // For nice display purpose only\nlet DEFAULT_ASSETS = null;\n//Get instrument list\ninstrumentPromise().then(instruments => {\n  GROUPED_INTRUMENTS = _.flatten(instruments.map(m => {\n    const displayName = m.display_name;\n    return m.submarkets.map(mm => ({\n      displayName: `${displayName} - ${mm.display_name}`,\n      instruments: mm.instruments,\n    }));\n  }));\n  let assets = [];\n  instruments.forEach(eGrp => {\n    eGrp.submarkets.forEach(eSubGrp => {\n      eSubGrp.instruments.forEach(({ symbol, display_name }) => {\n        assets.push({\n          code: symbol,\n          name: display_name,\n        });\n      });\n    });\n  });\n  state.masterAssetList = assets;\n  state.groupedAssets = GROUPED_INTRUMENTS;\n  // Randomly add top 2 assets in default list\n  DEFAULT_ASSETS = assets.filter(f => f.code === 'R_10').map(m => m.code);\n});\n\nconst refreshTraderStats = (loginid, token, scope) => liveapi\n  .send({\n    copytrading_statistics: 1,\n    trader_id: loginid,\n  })\n  .then(copyStatData => {\n    if (copyStatData.copytrading_statistics) {\n      const traderTokenDetails = _.find(scope.traderTokens, f =>\n        f.yourCopySettings && f.yourCopySettings.copy_start === token);\n      //Check if we already added this trader. If yes, then merge the changes\n      if (traderTokenDetails) {\n        _.merge(traderTokenDetails.traderStatistics, copyStatData.copytrading_statistics);\n      }\n      //If not added, then add this along with default yourCopySettings object\n      else {\n        scope.traderTokens.push(_.merge({\n          traderStatistics: copyStatData.copytrading_statistics,\n        }, defaultTraderDetails(token, loginid)));\n      }\n    }\n    updateLocalStorage(scope);\n  });\n\nlet win = null, win_view = null;\n\nconst state = {\n  masterAssetList: [],\n  masterTradeTypeList: _.cloneDeep(TRADE_TYPES),\n  groupedAssets: [],\n  is_loading: true,\n  is_virtual: false,\n  allowCopy: {\n    allow_copiers: 0,\n    onAllowCopyChangeCopierCellClick: () => state.onChangeCopytradeSettings(0),\n    onAllowCopyChangeTraderCellClick: () => state.onChangeCopytradeSettings(1),\n  },\n  onChangeCopytradeSettings: _.debounce((allow_copiers) => {\n    state.is_loading = true;\n    liveapi\n      .send({\n        set_settings: 1,\n        allow_copiers,\n      })\n      .then((settings) => {\n        state.is_loading = false;\n        // settings req does not return updated settings\n        state.allowCopy.allow_copiers = allow_copiers;\n      })\n      .catch(e => {\n        state.is_loading = false;\n        $.growl.error({ message: e.message });\n      });\n  }, 250),\n  onOpenChange: (index) => {\n    state.traderTokens[index].open = !state.traderTokens[index].open;\n  },\n  onStartedChange: (index) => {\n    state.traderTokens[index].disableStart = true;\n    const newStarted = !state.traderTokens[index].started;\n    if (newStarted) {\n      //Start copying\n      //if started, revert back to last saved changes(in case user changed anything)\n      const fromLocalStorage = local_storage.get(getStorageName());\n      if (fromLocalStorage) {\n        const currentTraderTokenDetails_localSto = fromLocalStorage.traderTokens[index];\n        if (currentTraderTokenDetails_localSto) {\n          const newObj = {};\n          _.merge(newObj, state.traderTokens[index], currentTraderTokenDetails_localSto);\n          state.traderTokens.splice(index, 1);\n          //Have to apply this trick in order to trigger update of UI using rivetsjs.\n          _.defer(() => {\n            state.traderTokens.splice(index, 0, newObj);\n            const settingsToSend = _.cloneDeep(newObj.yourCopySettings);\n            if (!settingsToSend.min_trade_stake) delete settingsToSend.min_trade_stake;\n            if (!settingsToSend.max_trade_stake) delete settingsToSend.max_trade_stake;\n            if (!settingsToSend.assets || settingsToSend.assets.length <= 0) delete settingsToSend.assets;\n            if (!settingsToSend.trade_types || settingsToSend.trade_types.length <= 0) delete settingsToSend.trade_types;\n            liveapi\n              .send(settingsToSend)\n              .then(() => {\n                newObj.disableStart = false;\n                newObj.started = true;\n                disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n                updateLocalStorage(state);\n              })\n              .catch(e => {\n                $.growl.error({ message: e.message });\n                newObj.disableStart = false;\n                disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n                updateLocalStorage(state);\n              });\n          });\n        }\n      }\n    } else {\n      //Stop copying\n      liveapi.send({\n          copy_stop: state.traderTokens[index].yourCopySettings.copy_start\n        })\n        .then(() => {\n          state.traderTokens[index].disableStart = false;\n          state.traderTokens[index].started = false;\n          updateLocalStorage(state);\n        })\n        .catch(e => {\n          $.growl.error({ message: e.message });\n          state.traderTokens[index].disableStart = false;\n          updateLocalStorage(state);\n        });\n    }\n  },\n  onRemove: (index) => {\n    const toBeRemovedItem = state.traderTokens[index];\n    state.traderTokens.splice(index, 1);\n    updateLocalStorage(state);\n    liveapi.send({\n      copy_stop: toBeRemovedItem.yourCopySettings.copy_start\n    })\n    .catch(e => {});\n  },\n  onRefresh: (index) => {\n    const trader = state.traderTokens[index];\n    const loginid = trader.loginid;\n    const token = trader.yourCopySettings.copy_start;\n    if (loginid && token) {\n      trader.disableRefresh = true;\n      refreshTraderStats(loginid, token, state)\n        .then(() => {\n          trader.disableRefresh = false;\n          updateLocalStorage(state);\n        })\n        .catch((e) => {\n          $.growl.error({ message: form_error_messages.refresh_failed });\n          trader.disableRefresh = false;\n          updateLocalStorage(scope);\n        });\n    }\n  },\n  onMinTradeChange: (event, scope) => {\n    state.formatAndSetTradeStake(event, scope, 'min_trade_stake')\n  },\n  onMaxTradeChange: (event, scope) => {\n    state.formatAndSetTradeStake(event, scope, 'max_trade_stake')\n  },\n  formatAndSetTradeStake: (event, scope, type_trade_stake) => {\n    const index = $(event.target).data('index');\n    const value = event.target.value;\n    const format_amount = _.isNil(value) ? false : value.match(/0*(\\d+\\.?\\d{0,2})/);\n    if (format_amount) {\n      scope.traderTokens[index].yourCopySettings[type_trade_stake] = format_amount[1];\n    } else {\n      scope.traderTokens[index].yourCopySettings[type_trade_stake] = '';\n    }\n  },\n  onUpdateYourSettings: (index) => {\n    if (validate_min_max_stake(state.traderTokens[index].yourCopySettings)) {\n      updateLocalStorage(state);\n      $.growl.notice({ message: 'Updated successfully' });\n    } else {\n      $.growl.error({ message: form_error_messages.invalid_stake_limit });\n    }\n  },\n  searchToken: {\n    token: '',\n    onTokenChange: (event, scope) => scope.searchToken.token = event.target.value,\n    disable: false,\n    onKeyDown: (event, scope) => {\n      if (event.keyCode === 13) {\n        scope.searchToken.addToken(event, scope);\n      }\n    },\n    addToken: (event, scope) => {\n      //If searchToken.token is empty, do nothing\n      if (!scope.searchToken.token) {\n        $.growl.error({ message: form_error_messages.enter_valid_token });\n        return;\n      }\n\n      //If already added, throw error\n      if (_.some(state.traderTokens, f => f.yourCopySettings.copy_start === scope.searchToken.token)) {\n        $.growl.error({ message: form_error_messages.token_already_added });\n        return;\n      }\n\n      scope.searchToken.disable = true;\n\n      validateToken(scope.searchToken.token)\n        .then(tokenUserData => {\n          if (!tokenUserData) throw new Error('Invalid token');\n          refreshTraderStats(tokenUserData.loginid, scope.searchToken.token, scope)\n            .then(() => {\n              scope.searchToken.token = '';\n              scope.searchToken.disable = false;\n              updateLocalStorage(scope);\n            })\n            .catch(e => {\n              $.growl.error({ message: e.message });\n              scope.searchToken.disable = false;\n              updateLocalStorage(scope);\n              _.defer(() => $(event.target).focus());\n            });\n        })\n        .catch(error => {\n          $.growl.error({ message: error.message });\n          scope.searchToken.disable = false;\n          updateLocalStorage(scope);\n        });\n    },\n  },\n  traderTokens: [],\n  openTokenMgmt: () => $('li.account ul a.token-management').click(),\n};\n\nconst initConfigWindow = () => {\n  const root = $(html).i18n();\n  win_view = rv.bind(root[0], state);\n  win = windows.createBlankWindow(root, {\n    title: 'Copy Trading'.i18n(),\n    resizable: false,\n    collapsable: true,\n    minimizable: true,\n    maximizable: false,\n    modal: false,\n    width: 600,\n    open: () => {\n      state.is_virtual = isVirtual();\n      if (!state.is_virtual) {\n        //Refresh all token details\n        const copyTrade = local_storage.get(getStorageName());\n        if (copyTrade) {\n          _.merge(state, copyTrade);\n          state.traderTokens = _.cloneDeep(state.traderTokens); // This is needed to trigger rivetsjs render\n        }\n        state.is_loading = true;\n        //Get the copy settings\n        liveapi\n          .send({ get_settings: 1 })\n          .then((settings) => {\n            state.is_loading = false;\n            state.allowCopy.allow_copiers = settings.get_settings.allow_copiers\n          })\n          .catch((e) => {\n            state.is_loading = false;\n            $.growl.error({ message: e.message });\n          });\n\n        //Refresh locally stored trader statistics\n        if (copyTrade) {\n          (async function () {\n            for (let traderToken of copyTrade.traderTokens) {\n              try {\n                const loginid = traderToken.loginid;\n                const token = traderToken.yourCopySettings.copy_start;\n                await refreshTraderStats(loginid, token, state);\n              } catch (e) {\n                console.error(e);\n              }\n            }\n          })();\n        }\n      }\n    },\n    close: () => {\n      win_view && win_view.unbind();\n      win && win.dialog('destroy').remove();\n      win_view = win = null;\n      // Clear tokens\n      state.traderTokens = [];\n    },\n    'data-authorized' :'true',\n  });\n  win.track({\n    module_id: 'copyTrade',\n    is_unique: true,\n    data: null,\n  });\n  win.dialog( 'open' );\n};\n\nconst disableKeypressChars = (...input_el_ids) => {\n  if (input_el_ids.length > 0) {\n    const comma_separated_ids = input_el_ids.join(', ');\n    $(comma_separated_ids).keypress((evt) => {\n      if ((evt.which < 48 || evt.which > 57) && evt.which !== 8 && evt.which !== 46) {\n        evt.preventDefault();\n      }\n    });\n  }\n};\n\nexport const init = ($menuLink) => {\n  $menuLink.click(() => {\n    if (!win) {\n      initConfigWindow();\n      disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n    }\n    else { win.moveToTop(); }\n  });\n};\n\nexport default { init }\n\n"]}